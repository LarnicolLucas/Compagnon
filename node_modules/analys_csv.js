const nb_de_ligne= 41;

const item = [
    11,
    9,
    1
];

const analys= (text) => {
    
    const row_raw = text.split(`$`);
    const splitSeprator = (text) => text.split(';');
    const matrix_row_col = row_raw.map(splitSeprator);

    //verification de la taille de chaque colonne
    const recursiveCheckNb = (iteration, array, nb, res) => {

        if(array.length-1 < iteration){
            return res
        } else {
            if(array[iteration].length == nb){
                return recursiveCheckNb(iteration+1, array, nb, true)
            } else {
                return false
            }
             
        }
    };

    //convertie la list brut en list d'interventions
    const recursiveCreateObjectIntervention = (iteration, array, nb, res)=> {
        if(iteration > nb -1){
            return res
        } else {

            const new_intervention = array.map(col => col[iteration]);

            res.push(new_intervention);

            return recursiveCreateObjectIntervention(iteration+1, array, nb, res)
        }
    };

    //convertie chaque element de la list
    const array_function_converter = [

        (date_)=> { return {"date": date_} },

        (nom_prenom)=> nom_prenom != "" ? { acompagnateur: { nom: nom_prenom.split(" ")[0], prenom: nom_prenom.split(" ")[1]}} : {acompagnateur : {nom: "", prenom: ""}} ,

        (type)=> type == '1' ? {type: "VPS"} : {},

        (type)=> type == '1' ? {type: "PST"} : {},

        (type)=> type == '1' ? {type: "IMD"} : {},

        (idc)=> {
            if(idc != ""){
                const delete_quotes = idc.split('"');
                let delete_dash = delete_quotes;
                if(delete_quotes[1] != undefined){
                    delete_dash = delete_quotes[1].split(/\r?\n/);
                }

                const res = delete_dash.map((el, i) => {return {id: i, numero: el}});

                return { IDC : res}
            } else {
                return {IDC : []}
            }
        },

        (habilitation)=> {return {habilitation: habilitation}}

    ];

    const addGestToArrayFunction = (arrayFunction, item) => {
        let res = arrayFunction;

        for(let i0 = 0; i0 <item.length -1; i0++){
            for(let i = 0; i<item[i0] - 1; i++){
                res.push((geste, res)=> geste == '' ? res : res.push({id_item: i0, id_geste: i, maitrise: geste}) )
            }
        }

        return res
    };

    let arrayFunctions = addGestToArrayFunction(array_function_converter, item);

    arrayFunctions.push((commentaire)=> {return { commentaire: commentaire}})


    if(recursiveCheckNb(0, matrix_row_col, nb_de_ligne, true)){


        //creation de l'objet "intervention"

        const list_interventions_list = recursiveCreateObjectIntervention (0, matrix_row_col, nb_de_ligne, []);

        //convertion de l'array en objet intervention
        const list_intervention_object = list_interventions_list.map((el, i0) => {

            let list_geste = []

           return el.reduce((acc, cur, i) => {
                if(arrayFunctions[i] == undefined){
                    return acc
                } else {
                    if(i === 1){
                        return Object.assign(arrayFunctions[i-1](acc), arrayFunctions[i](cur), {id: i0})
                    }else if(i >= 7 && i != arrayFunctions.length - 1){
                        return Object.assign(acc, {geste_metier : arrayFunctions[i](cur, list_geste)})
                    } else {
                        return Object.assign(acc, arrayFunctions[i](cur))
                    }
                }
           })

        });



        return list_intervention_object
    }
}

module.exports = analys;